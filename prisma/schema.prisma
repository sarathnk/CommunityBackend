datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  type        String
  themeColor  String?  // hex color, e.g. #E50914
  description String?
  logoUrl     String?
  place       String?  // location/place for the community
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  roles       Role[]
  events      Event[]
  announcements Announcement[]
  elections   Election[]
  chats       Chat[]
}

model Role {
  id             String   @id @default(cuid())
  name           String
  description    String   @default("")
  permissions    Json     @default("[]")
  isDefault      Boolean  @default(false)
  color          String?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  users          User[]
  createdAt      DateTime @default(now())
}

model User {
  id             String   @id @default(cuid())
  fullName       String
  passwordHash   String
  phoneNumber    String   @unique
  photoUrl       String?
  lastLoginAt    DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           Role @relation(fields: [roleId], references: [id])
  roleId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Event {
  id             String   @id @default(cuid())
  title          String
  description    String
  location       String
  startDate      DateTime
  endDate        DateTime
  imageUrl       String?
  attendeesCount Int      @default(0)
  budget         Float?
  actualCost     Float?
  organizerId    String
  organizerName  String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime @default(now())
}

model Announcement {
  id             String   @id @default(cuid())
  title          String
  content        String
  authorId       String
  authorName     String
  isPinned       Boolean  @default(false)
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime @default(now())
}

model Election {
  id             String   @id @default(cuid())
  title          String
  description    String
  type           String   // 'position', 'issue', 'referendum', etc.
  status         String   @default("draft") // 'draft', 'active', 'completed', 'cancelled'
  startDate      DateTime
  endDate        DateTime
  allowMultiple  Boolean  @default(false) // Allow voting for multiple candidates
  maxVotes       Int?     // Maximum number of votes per voter (if allowMultiple is true)
  isAnonymous    Boolean  @default(false) // Whether votes are anonymous
  createdById    String
  createdByName  String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  candidates     Candidate[]
  votes          Vote[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Candidate {
  id          String   @id @default(cuid())
  name        String
  description String?
  photoUrl    String?
  position    String?  // For position-based elections
  order       Int      @default(0) // Display order
  election    Election @relation(fields: [electionId], references: [id])
  electionId  String
  votes       Vote[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vote {
  id          String   @id @default(cuid())
  voterId     String
  voterName   String
  election    Election @relation(fields: [electionId], references: [id])
  electionId  String
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId String
  createdAt   DateTime @default(now())
  
  @@unique([voterId, electionId, candidateId]) // Prevent duplicate votes
}

model Chat {
  id             String   @id @default(cuid())
  name           String
  description    String?
  type           String   @default("group") // 'group', 'direct'
  isPrivate      Boolean  @default(false)
  createdById    String
  createdByName  String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  participants   ChatParticipant[]
  messages       Message[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ChatParticipant {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  userId    String
  userName  String
  userPhoto String?
  role      String   @default("member") // 'admin', 'moderator', 'member'
  joinedAt  DateTime @default(now())
  lastSeen  DateTime @default(now())
  
  @@unique([chatId, userId]) // Prevent duplicate participants
}

model Message {
  id        String   @id @default(cuid())
  content   String
  type      String   @default("text") // 'text', 'image', 'file', 'system'
  senderId  String
  senderName String
  senderPhoto String?
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  replyToId String?  // For reply messages
  replyTo   Message? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies   Message[] @relation("MessageReplies")
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String   @default("general") // 'member', 'event', 'announcement', 'election', 'meeting', 'role', 'security', 'general'
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
